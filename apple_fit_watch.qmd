---
title: "apple_fb_watch"
author: "맞갖다"
format: html
editor: visual
---

https://www.kaggle.com/datasets/aleespinosa/apple-watch-and-fitbit-data


```{r}
#| message: false
#| warning: false
library(tidyverse)
aw_fb <- read_csv('aw_fb_data.csv') |> select(-2)
colSums(is.na(aw_fb))
head(aw_fb)
```

결측치 없음

```{r}
library(flextable)
# 데이터 프레임 생성
variable_info <- data.frame(
  변수명 = c("...1", "age", "gender", "height", "weight", "steps", "hear_rate", "calories", 
           "distance", "entropy_heart", "entropy_setps", "resting_heart", "corr_heart_steps", 
           "norm_heart", "intensity_karvonen", "sd_norm_heart", "steps_times_distance", "device", "activity"),
  한국어_해석 = c("고유 식별자 (ID)", "나이 (연령)", "성별 (1: 남성, 0: 여성)", "키 (cm)", "체중 (kg)", "걸음 수", 
               "심박수", "소모 칼로리", "이동 거리 (km)", "심박수 엔트로피 (심박수의 복잡성 또는 불규칙성 지표)", 
               "걸음수 엔트로피 (걸음 패턴의 복잡성 또는 불규칙성 지표)", "안정 시 심박수", "심박수와 걸음수 간 상관계수", 
               "정규화된 심박수", "Karvonen 방식으로 계산된 운동 강도 지표", "정규화된 심박수의 표준편차", 
               "걸음 수와 이동 거리의 곱", "사용된 장치 (예: Apple Watch)", "활동 유형 (예: Lying, Sitting, Running 등)")
)

# flextable 적용
flextable(variable_info) |> 
  autofit() |>  # 자동 크기 조정
  theme_vanilla() |>  # 가독성 좋은 테마 적용
  set_caption("explain variable")  # 테이블 제목 추가
```


```{r}
summary(aw_fb)
descr::freq(aw_fb$device, plot=F)
descr::freq(aw_fb$activity, plot=F)
skimr::skim(aw_fb)
```



```{r}
aw_fb |> 
  mutate(gender = as.factor(gender)) |> 
  group_by(gender) |> 
  summarise(mean_weight = mean(weight),
            mean_height = mean(height),
            mean_hear_rate = mean(hear_rate))
```


```{r}
aw_fb1 <- aw_fb |> 
  mutate(gender = factor(gender, labels=c("female","male")))
descr::freq(aw_fb1$gender,plot=F)
```


```{r}
aw_fb1 |> 
  group_by(gender,activity) |> 
  summarise(count=n(),.groups='drop') |> 
  ggplot(aes(x=activity,y=count,fill=gender)) +
  geom_bar(stat='identity',position='dodge') +
  theme_bw() +
  labs(title='activity by gender',y=NULL)

aw_fb1 |> 
  group_by(gender) |> 
  summarise(count=n())
```



### 나이에 따른 걸음수
```{r}
aw_fb1 |> ggplot() +
  geom_point(aes(x=age, y=steps)) +
  theme_bw() +
  labs(title='steps by age')
```

```{r}
aw_fb1 |> mutate(age = if_else(age <20, '10~19',
                               if_else(age<30, '20~29',
                                       if_else(age<40, '30~39',
                                               if_else(age<50, '40~49','50~59'))))) |> 
  ggplot() +
  geom_bar(aes(x=age, fill=activity),position='dodge') +
  theme_bw() +
  labs(y=NULL)
```


걸음수와 활동유형의 관계가 있을까?
```{r}
aw_fb1 |> 
  ggplot() +
  geom_histogram(aes(x=steps, fill=activity),position='dodge') +
  facet_wrap(~activity) +
  theme_bw() +
  theme(legend.position='none') +
  labs(y=NULL, title = 'histogram of steps by activity')
```

```{r}
#| message: false
#| warning: false
GGally::ggpairs(aw_fb,mapping = aes(fill=as.factor(activity)))
GGally::ggcorr(aw_fb, label=TRUE,hjust=0.75, size=3, color='grey50')
```


#### split data
```{r}
aw_fb1 <- aw_fb1 |> mutate(activity = as_factor(activity))
split <- initial_split(aw_fb1, strata = 'activity')
train <- training(split)
test <- testing(split)


aw_fb1|> group_by(activity) |> summarise(n()/nrow(aw_fb1))
train |> group_by(activity) |> summarise(n()/nrow(train))
test |> group_by(activity) |> summarise(n()/nrow(test))


```


#### parsnip
```{r}
library(tidymodels)

multinom_reg_spec <-
  multinom_reg() %>%
  set_engine('nnet')

kknn_spec <-
  nearest_neighbor(neighbors = tune()) %>%
  set_engine('kknn') %>%
  set_mode('classification')

rand_forest_spec <-
  rand_forest(mtry = tune(), min_n = tune()) %>%
  set_engine('ranger', importance='permutation') %>%
  set_mode('classification')

```



#resampling
```{r}
set.seed(123)
vfold <- vfold_cv(train, v=5, strata='activity')
control <- control_resamples(save_pred=T,
                             save_workflow=T,
                             event_level = 'first')
```



#### recipe
```{r}
rec <- recipe(activity~., data= train) |> 
  update_role(`...1`,device, new_role='id') |>
  step_normalize(all_numeric_predictors()) |> 
  step_pca(hear_rate,norm_heart,intensity_karvonen, num_comp = 1)

knn_rec <- recipe(activity~., data=train) |> 
  update_role(`...1`,device, new_role='id') |>
  step_normalize(all_numeric_predictors()) |> 
  step_mutate(gender = as.numeric(gender))

rand_rec <- recipe(activity~., data=train) |> 
  update_role(`...1`,device, new_role='id')

prep(rec) |> bake(train) |> summary()
prep(knn_rec) |> bake(train) |> summary()



```


#### logistic workflow and fit
```{r}
multinom_wflow <- workflow() |> add_model(multinom_reg_spec) |> add_recipe(rec)
multinom_fit <- fit(multinom_wflow, train)
extract_fit_engine(multinom_fit)

```

#### logistic regression predict
```{r}
multinom_pred <- augment(multinom_fit, test)
wear_metric <- metric_set(accuracy, sens,spec,roc_auc,brier_class)
multinom_pred |> wear_metric(activity,estimate=.pred_class, .pred_Lying, .pred_Sitting,`.pred_Self Pace walk`,`.pred_Running 3 METs`,`.pred_Running 5 METs`,`.pred_Running 7 METs`, event_level = 'first')
multinom_pred |> conf_mat(truth = activity, estimate = .pred_class)
```



```{r}
roc_curve(multinom_pred, activity, .pred_Lying, .pred_Sitting,`.pred_Self Pace walk`,`.pred_Running 3 METs`,`.pred_Running 5 METs`,`.pred_Running 7 METs`) |> autoplot()
```

#### knn tune
```{r}
knn_wflow <- workflow() |> add_model(kknn_spec) |> add_recipe(knn_rec)
set.seed(234)
tuning <- tune_grid(knn_wflow, resamples = vfold, grid=15,control=control)
```



```{r}
autoplot(tuning)
show_best(tuning,metric = 'accuracy')
best_knn_wflow <- workflow() |> add_model(nearest_neighbor(neighbors = 4) %>%
  set_engine('kknn') %>%
  set_mode('classification')) |> add_recipe(knn_rec)

```



```{r}
collect_predictions(tuning) |> group_by(id) |> roc_curve(activity, .pred_Lying, .pred_Sitting,`.pred_Self Pace walk`,`.pred_Running 3 METs`,`.pred_Running 5 METs`,`.pred_Running 7 METs`) |> autoplot()
```


#### knn fit and predict
```{r}
knn_fit <- fit(best_knn_wflow, train)
knn_fit |> extract_fit_engine()
augment(knn_fit, test) |> wear_metric(activity,estimate=.pred_class, .pred_Lying, .pred_Sitting,`.pred_Self Pace walk`,`.pred_Running 3 METs`,`.pred_Running 5 METs`,`.pred_Running 7 METs`, event_level = 'first')
augment(knn_fit, test) |> conf_mat(truth = activity, estimate = .pred_class)
```





#### random forest tune
```{r}
rand_wflow <- workflow() |> add_model(rand_forest_spec) |> add_recipe(rand_rec)
set.seed(234)
rand_tuning <- tune_grid(rand_wflow, vfold, grid=10, control=control)
```




```{r}
autoplot(rand_tuning)
show_best(rand_tuning, metric='accuracy')
collect_predictions(rand_tuning) |> group_by(id) |> roc_curve(activity, .pred_Lying, .pred_Sitting,`.pred_Self Pace walk`,`.pred_Running 3 METs`,`.pred_Running 5 METs`,`.pred_Running 7 METs`) |> autoplot()
best_rand_param <- select_best(rand_tuning,metric = 'accuracy')
best_rand_wflow <- finalize_workflow(rand_wflow, best_rand_param)
best_rand_wflow
```



#### rand forest fit and predict
```{r}
rand_fit <- last_fit(best_rand_wflow, split)
collect_predictions(rand_fit) |> wear_metric(activity,estimate=.pred_class, .pred_Lying, .pred_Sitting,`.pred_Self Pace walk`,`.pred_Running 3 METs`,`.pred_Running 5 METs`,`.pred_Running 7 METs`, event_level = 'first')
collect_predictions(rand_fit)  |> conf_mat(truth = activity, estimate = .pred_class)
collect_predictions(rand_fit)|> roc_curve(activity, .pred_Lying, .pred_Sitting,`.pred_Self Pace walk`,`.pred_Running 3 METs`,`.pred_Running 5 METs`,`.pred_Running 7 METs`) |> autoplot()
```


```{r}
vip::vip(extract_fit_parsnip(rand_fit))
```

